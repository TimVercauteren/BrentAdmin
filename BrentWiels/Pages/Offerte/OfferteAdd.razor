@page "/offerte/add/{KlantId:int}"
@using BrentWiels.Data
@using BrentWiels.Viewmodels
@using BrentWiels.Data.Interfaces
@using BrentWiels

@inject IOfferteDataService OfferteService
@inject NavigationManager NavigationManager
@inject IJSRuntime js


<h1>Toevoegen</h1>

@if (offerte == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="row">
            <div class="col-sm-4">
                <h2>Offerte</h2>
            </div>
            <div class="col-sm-4">
                <h3> @offerte?.Klant?.Naam</h3>
            </div>
            <div class="col-sm-4">
                <p>Offertenummer: @offerte?.OfferteNummer</p>
            </div>
        </div>
        <div class="row">
            <div class="col-sm-8">
                <p>Vervaldatum offerte (bij aanmaak vandaag): @offerte.VervalDatum.ToShortDateString()</p>
            </div>
        </div>
        @foreach (var lijn in Werklijnen)
        {
            <div class="row">
                <div class="col-sm-2">
                    <label>Werk/materiaal:</label>
                </div>
                <div class="col-sm-8">
                    <input type="text" @bind="lijn.Omschrijving" />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-2">
                    <label>Prijs:</label>
                </div>
                <div class="col-sm-8">
                    <input type="number" @bind="lijn.NettoPrijs" />
                </div>
            </div>
            <div class="row">
                <div class="col-sm-2">
                    <label>Marge (in %):</label>
                </div>
                <div class="col-sm-8">
                    <input type="number" @bind="lijn.PercentageWinst" />
                </div>
            </div>
            <hr />
        }
        <button @onclick="AddWerklijn">Voeg werk toe</button>
        <button @onclick="@(async () => await MaakOfferte())">Maak de offerte</button>
    </div>

}

@code {
    OfferteViewModel offerte;
    [Parameter]
    public int KlantId { get; set; }

    private static int _maxLijnen = 6;

    List<WerkLineViewModel> Werklijnen { get; set; }

    protected override async Task OnInitializedAsync()
    {
        offerte = await OfferteService.GetNewOfferteForCustomer(KlantId);
        AddWerklijn();
    }

    private void AddWerklijn()
    {
        if (this.Werklijnen == null)
        {
            this.Werklijnen = new List<WerkLineViewModel>();
        }
        if (this.Werklijnen.Count < _maxLijnen)
        {
            Werklijnen.Add(new WerkLineViewModel());
        }
    }

    private async Task MaakOfferte()
    {
        offerte.Werklijnen = Werklijnen;

        var bytes = await OfferteService.AddOfferteForCustomer(offerte);

        FileUtil.SaveAs(js, $"{offerte.OfferteNummer}.xlsx", bytes);
    }
}
