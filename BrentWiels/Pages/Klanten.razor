@page "/klanten"

@using BrentWiels.Data
@using BrentWiels.Viewmodels
@using BrentWiels.Data.Interfaces


@inject IKlantenDataService KlantenService
@inject NavigationManager NavigationManager


@if (customers == null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="container">
    <div class="row">
        <h1>Klanten overzicht</h1>
    </div>
    <div class="row">
        <div class="col-sm">
            <NavLink class="nav-link" href="klanten/add"><button class="btn-primary">Klant toevoegen</button></NavLink>
        </div>
    </div>
    <hr />
    <div class="row">
        <div class="col-sm">
            <input type="text" @onchange="ApplyNameFilter"  placeholder="Zoek op naam.."/>
        </div>
    </div>
    <div class="row">
        <table class="table col-sm">
            <thead>
                <tr>
                    <th></th>
                    <th>Naam</th>
                    <th>Adres</th>
                    <th>GSM</th>
                    <th>Email</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var customer in customers)
                {
                    <tr>
                        <td><button @onclick="e => GoToDetail(customer.Id)" class="btn-primary"> Detail</button></td>
                        <td>@customer.Naam</td>
                        <td>@customer.FullAdress</td>
                        <td>@customer.TelefoonNummer</td>
                        <td>@customer.Email</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>

}

@code {
    IList<KlantViewModel> customers;
    IList<KlantViewModel> allCustomers;
    string NameFilter { get; set; }

    protected override async Task OnInitializedAsync()
    {
        allCustomers = await KlantenService.GetAllCustomers();
        ResetCustomers();
    }

    public void GoToDetail(int id)
    {
        NavigationManager.NavigateTo($"detail/{id}");
    }

    public async Task ApplyNameFilter(ChangeEventArgs eventArgs)
    {
        var e = eventArgs.Value;

        var filter = e.ToString();

        if (string.IsNullOrEmpty(filter))
        {
            ResetCustomers();
        }

        var newList = allCustomers.Where(x => x.Naam.ToUpper().Contains(filter.ToUpper())).ToList();
        if(newList.Count > 0)
        {
            customers = newList;
        }
    }

    private void ResetCustomers()
    {
        customers = allCustomers;
    }

}
